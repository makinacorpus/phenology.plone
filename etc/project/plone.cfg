##############################################################################
# Project specific settings
##############################################################################


[v]
project-programs =     10 zeo ${locations:zeoserver}/bin/runzeo ${locations:zeoserver} true ${v:sys-user}
    21 instance1 (autostart=${v:autostart_instance1}) ${buildout:directory}/bin/instance1 [console] true ${v:sys-user}
    22 instance2 (autostart=${v:autostart_instance2}) ${buildout:directory}/bin/instance2 [console] true ${v:sys-user}
filesystem-parts =
    touch
    chmod
    chown
    mkdirs
project-parts =
    env
    grp
    productdistros
    zeoserver
    instance-plain
    instance
    instance1
    instance2
    zopepy
    backup
    omelette
#    code-analysis
    createcoverage
    flake8
    zptlint
    coverage-sh
    test

[buildout]
versions=versions
sources = sources
# project packages
eggs = phenology.plone
       Pillow
zcml =phenology.plone
# extra directories oto add to the python path
extra-paths =
auto-checkout =
    phenology.plone
    plone.app.theming
    collective.cover
#
# see http://pypi.python.org/pypi/mr.developer for documentation

# auto tracked developement products
[sources]
phenology.plone=fs phenology.plone
plone.app.theming = git https://github.com/plone/plone.app.theming.git branch=1.1.x
collective.cover = git https://github.com/collective/collective.cover.git branch=ebr-display-collection-with-bootstrap-carousel

[remotes]
# Plone
plone = git://github.com/plone
plone_push = git@github.com:plone
svn_plone = https://svn.plone.org/svn/plone
#svn_plone = http://svn.plone.org/svn/plone

# Collective
collective = git://github.com/collective
collective_push = git@github.com:collective
svn_collective = https://svn.plone.org/svn/collective
#svn_collective = http://svn.plone.org/svn/collective

[locations]
zope2=${buildout:parts-directory}/zope2
instance1=${buildout:parts-directory}/instance1
instance2=${buildout:parts-directory}/instance2
instance=${buildout:parts-directory}/instance
productdistros=${buildout:parts-directory}/productdistros
zeoserver=${buildout:parts-directory}/zeoserver

[zeoserver]
recipe = plone.recipe.zeoserver
zeopack-script-name=zeoserver-zeopack
pack-days=${v:zeo-pack-days}
blob-storage = ${locations:blob-storage}
zeo-address = ${hosts:zeo}:${ports:zeo}
socket-name = ${buildout:directory}/var/zeo.zdsock
zeo-conf-additional =

eggs = ZopeUndo
    ZODB3
    plone.app.blob

[instance]
recipe = plone.recipe.zope2instance
verbose-security=${v:verbose-security}
zeo-client-cache-size = ${v:zeo-client-cache-size}
zeo-client = on
zeo-address = ${zeoserver:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver:zeo-address}
        storage temp
        name zeostorage
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

blob-storage = ${zeoserver:blob-storage}
shared-blob = on
http-address = ${hosts:instance}:${ports:instance}
user = ${v:admin-user}:${v:admin-password}
session-timeout-minutes = ${v:session-timeout-minutes}
event-log-level = ${v:event-log-level}
z2-log-level = ${v:z2-log-level}
#webdav-address = ${hosts:webdav}:${ports:webdav}
zodb-cache-size = 50000
zeo-client-cache-size = 5MB

# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths = ${buildout:extra-paths}
eggs = ${buildout:eggs}
products = ${buildout:directory}/products
           ${locations:productdistros}
zcml = ${buildout:zcml}
environment-vars =
    zope_i18n_compile_mo_files true
    TMPDIR ${locations:tmp}

[instance1]
<= instance
http-address = ${hosts:instance1}:${ports:instance1}

[instance2]
<= instance
http-address = ${hosts:instance2}:${ports:instance2}

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls=${groups:products-urls}
version-suffix-packages = ${groups:version-suffix-packages}
nested-packages = ${groups:nested-packages}

[instance-plain]
<= instance
zeo-client = off
zeo-address =
temporary-storage =

# eggs & scripts installation
[zopepy]
recipe = zc.recipe.egg
interpreter = zopepy
eggs =
# release helpers
    zest.releaser
    jarn.mkrelease
    z3c.checkversions [buildout]
    ${instance:eggs}
# Scripts generated filtering
scripts =
#z3c.checkversions
    checkversions
#jarn.mkrelease
    mkrelease
#zest.releaser
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
    zopepy
#zope2
    repozo
    zeoctl
    zeopack
    zeopasswd
#with_tool_bpython
    bpython
#with_tool_ipython
    ipython
extra-paths =
    ${instance:extra-paths}

# zope.testing testrunner support
[testenv]
INSTANCE_HOME = ${locations:instance}
CONFIG_FILE = ${locations:instance}/etc/zope.conf

# See http://pypi.python.org/pypi/zc.recipe.testrunner/
[test]
recipe = zc.recipe.testrunner
eggs =
    plone.app.upgrade
    Plone
    phenology.plone [test]
    ${instance:eggs}
extra-paths = ${instance:extra-paths}
defaults = ['--exit-with-status', '--auto-color', '--auto-progress', '-s', 'phenology.plone']
environment = testenv
extra-paths = ${zopepy:extra-paths}

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
products = ${instance:products}
packages = ./
           ${instance:extra-paths}

# Command below is important
[mkdirs]
recipe = plone.recipe.command
update-command = ${mkdirs:command}
command =
    mkdir -pv ${locations:blob-storage};
    mkdir -pv ${locations:blob-backup};
    mkdir -pv ${locations:blob-storage};
    mkdir -pv ${locations:blob-backup};
    mkdir -pv ${locations:tmp};
    mkdir -pv ${buildout:directory}/var/log/apache;
    mkdir -pv ${buildout:directory}/var/log/nginx;
    mkdir -pv ${buildout:directory}/var/backups;\
    mkdir -pv ${buildout:directory}/var/snapshotbackups

[chmod]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = ${chmod:command}
command =
    chmod 600 .installed.cfg etc/sys/settings*;
    find ${buildout:directory}/var -type d -exec chmod 700 {} \;
    chmod 744 ${buildout:directory}/bin/*;
    chmod -R 740 ${buildout:directory}/etc/sys/settings-local.cfg;
    chmod -R o-rwx ${buildout:directory}/etc/;
    chmod -R 740 ${buildout:directory}/parts/;
    chmod -v 755 ${buildout:directory}/www/;

[chown]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = ${chown:command}
command =
    chown -R ${v:sys-user}:${v:sys-group} ${buildout:directory}/var;
    find ${buildout:eggs-directory} -type d -name LC_MESSAGES -exec chown -R ${v:sys-user}:${v:sys-group} {} \;
    find ${buildout:eggs-directory}/Products.kupu* -type d -name i18n -exec chown -R ${v:sys-user}:${v:sys-group} {} \;
    find ${buildout:parts-directory} -name runzope -exec chown ${v:sys-user}:${v:sys-group} {} \;

[backup]
recipe = collective.recipe.backup
blobbackuplocation = ${locations:blob-backup}/backups
blobsnapshotlocation = ${locations:blob-backup}/snapshots
keep = ${crons:nb_fullbackups_to_keep}
keep_blob_days = ${crons:nb_backups_to_keep}

[touch]
recipe = plone.recipe.command
update-command = ${touch:command}
command =
    touch ${buildout:directory}/var/log/instance1.log;
    touch ${buildout:directory}/var/log/instance.log;
    touch ${buildout:directory}/var/log/instance2.log;
    touch ${buildout:directory}/var/log/instance3.log;
    touch ${buildout:directory}/var/log/instance4.log;
    touch ${buildout:directory}/var/log/main.log;
    touch ${buildout:directory}/var/log/transform.log;

[env]
recipe = collective.recipe.environment
PS1 =
TERMCAP =
SSH_CLIENT =
SSH_TTY =
SSH_CONNECTION =
LANG =
SHELL =

[grp]
recipe = collective.recipe.grp

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
build-libxslt = true
build-libxml2 = true
libxslt-url = http://gentoo.tiscali.nl/distfiles/libxslt-${versions:libxslt}.tar.gz
libxml2-url = http://gentoo.tiscali.nl/distfiles/libxml2-${versions:libxml2}.tar.gz

[groups]
# OLD ZOPE2 PRODUCTS SUPPORT
products-urls =

version-suffix-packages =

nested-packages =

[nodejs]
recipe = gp.recipe.node
url = http://nodejs.org/dist/v${versions:nodejs}/node-v${versions:nodejs}.tar.gz

[buildout]
package-min-coverage = ${v:package-min-coverage}

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src/phenology.plone
pre-commit-hook = ${v:pre-commit-hook}
flake8 = True
flake8-ignore = ${v:flake8-ignore}
flake8-max-complexity=${v:flake8-max-complexity}
return-status-codes = True

[createcoverage]
recipe = zc.recipe.egg
eggs = createcoverage

[flake8]
# XXX: use of this part is deprecated; use plone.recipe.codeanalysis instead
recipe = zc.recipe.egg
eggs = flake8

[coverage-sh]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/coverage.sh
mode = 755
input = inline:
    #! /bin/sh
    # checks for report created with createcoverage and evaluate the result
    DEFAULT=${buildout:package-min-coverage}
    REPORT="htmlcov/index.html"
    if [ "$#" -eq 1 ] && [ $1 -ge 0 ] && [ $1 -le 100 ]; then
        MINIMUM=$1
    else
        echo "Invalid value for minimum coverage; using default: $DEFAULT%"
        MINIMUM=$DEFAULT
    fi
    if [ ! -f "$REPORT" ]; then
        bin/createcoverage run bin/test
    fi
    # find first percentage value in file (module test coverage) and return it
    COVERAGE=`grep "[0-9]\{1,3\}[%]" $REPORT -m 1 -o | grep "[0-9]\{1,3\}" -o`
    if [ $COVERAGE -lt $MINIMUM ]; then
        echo "Insufficient test coverage: $COVERAGE% (minimum acceptable is $MINIMUM%)"
        exit 1
    else
        echo "Current test coverage: $COVERAGE%"
        exit 0
    fi

[zptlint]
# XXX: use of this part is deprecated; use plone.recipe.codeanalysis instead
recipe = zc.recipe.egg
eggs = zptlint

# vim:set ft=cfg:
